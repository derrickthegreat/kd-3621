generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ------------------------------------------------------

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum Slot {
  HEAD
  CHEST
  HANDS
  FEET
  WEAPON
  ACCESSORY
}

enum TroopType {
  CAVALRY
  INFANTRY
  ARCHERY
  ENGINEERING
  LEADERSHIP
  GATHERING
  PEACEKEEPING
  CONQUERING
  COMBO
  DEFENSE
  GARRISON
  SKILL
  SMITE
  SUPPORT
  VERSATILITY
}

enum Status {
  NEW
  REVIEWING
  APPROVED
  DECLINED
  CLOSED
}

// --- Alliance & Stats ------------------------------------------

model Alliance {
  id           String            @id @default(uuid())
  tag          String            @unique
  name         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  players      Player[]          @relation("PlayerAlliance")
  stats        AllianceStats[]
  applications EventApplication[]

  @@map("alliances")
}

model AllianceStats {
  id           String    @id @default(uuid())
  alliance     Alliance  @relation(fields: [allianceId], references: [id])
  allianceId   String
  snapshot     DateTime  @default(now())
  totalPower   Int

  @@index([allianceId, snapshot])
  @@map("alliance_stats")
}

// --- Players & Snapshots ---------------------------------------

model Player {
  id           String             @id @default(uuid())
  rokId        String             @unique
  name         String
  alliance     Alliance?          @relation("PlayerAlliance", fields: [allianceId], references: [id])
  allianceId   String?
  isMigrant    Boolean            @default(false)
  dateMigrated DateTime?
  dateMigratedOut DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  userId       String?
  userIdVerified Boolean          @default(false)
  stats        PlayerStats[]
  commanders   PlayerCommander[]
  equipment    PlayerEquipment[]
  applications EventApplication[]

  @@map("players")
}

model PlayerStats {
  id          String    @id @default(uuid())
  player      Player    @relation(fields: [playerId], references: [id])
  playerId    String
  snapshot    DateTime  @default(now())
  killPoints  Int
  t4Kills     Int
  t5Kills     Int
  t45Kills    Int
  deaths      Int
  power       Int

  @@index([playerId, snapshot])
  @@map("player_stats")
}

// --- Commanders & Assignments ---------------------------------

model Commander {
  id           String                  @id @default(uuid())
  name         String
  iconUrl      String
  speciality   TroopType[]
  createdAt    DateTime                @default(now())
  updateAt     DateTime                @default(now())
  players      PlayerCommander[]
  applications ApplicationCommander[]

  @@map("commanders")
  primaryCommanderPairings CommanderPairing[] @relation(name: "PrimaryPairings")
  secondaryCommanderPairings CommanderPairing[] @relation(name: "SecondaryPairings")
}

model CommanderSkillTree {
  id           String                  @id @default(uuid())
  name         String
  rating       Float?
  description  String?
  url          String
}

model CommanderPairing {
  id           String                  @id @default(uuid())
  primary      Commander @relation(name: "PrimaryPairings", fields: [primaryid], references: [id])
  primaryid    String
  secondary    Commander @relation(name: "SecondaryPairings", fields: [secondaryid], references: [id])
  secondaryid  String
}

model PlayerCommander {
  id          String     @id @default(uuid())
  player      Player     @relation(fields: [playerId], references: [id])
  playerId    String
  commander   Commander  @relation(fields: [commanderId], references: [id])
  commanderId String
  level       Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  @@unique([playerId, commanderId])
  @@map("player_commanders")
}

// --- Equipment & Assignments ----------------------------------

model Equipment {
  id           String                   @id @default(uuid())
  name         String
  slot         Slot
  rarity       Rarity
  src          String
  alt          String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @default(now())

  owners       PlayerEquipment[]
  applications ApplicationEquipment[]
  attributes   EquipmentAttribute[]
  iconic       EquipmentIconicAttribute[]
  materials    EquipmentMaterial[]

  @@map("equipment")
}

model PlayerEquipment {
  id          String     @id @default(uuid())
  player      Player     @relation(fields: [playerId], references: [id])
  playerId    String
  equipment   Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId String
  acquiredAt  DateTime   @default(now())

  @@unique([playerId, equipmentId])
  @@map("player_equipment")
}

// --- Attributes & Their Link to Equipment ---------------------

model Attribute {
  id          String                 @id @default(uuid())
  name        String                 @unique
  description String?
  isIconic    Boolean                @default(false)
  createdAt   DateTime               @default(now())

  equipment   EquipmentAttribute[]
  iconics     EquipmentIconicAttribute[]

  @@map("attributes")
}

model EquipmentAttribute {
  id            String     @id @default(uuid())
  equipment     Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId   String
  attribute     Attribute  @relation(fields: [attributeId], references: [id])
  attributeId   String
  value         String?

  @@unique([equipmentId, attributeId])
  @@map("equipment_attributes")
}

model EquipmentIconicAttribute {
  id             String     @id @default(uuid())
  equipment      Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId    String

  attribute      Attribute  @relation(fields: [attributeId], references: [id])
  attributeId    String

  value          String?
  tier           Int?       // your optional tier column

  @@unique([equipmentId, attributeId])
  @@map("equipment_iconic_attributes")
}

// --- Materials & Their Link to Equipment ----------------------

model Material {
  id          String                @id @default(uuid())
  name        String
  src         String?
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())

  equipment   EquipmentMaterial[]
  
  @@map("materials")
}

model EquipmentMaterial {
  id            String     @id @default(uuid())
  equipment     Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId   String
  material      Material   @relation(fields: [materialId], references: [id])
  materialId    String
  rarity        Rarity?
  quantity      Int        @default(1)

  @@unique([equipmentId, materialId])
  @@map("equipment_materials")
}


// --- Events & Applications ------------------------------------

model Event {
  id            String             @id @default(uuid())
  name          String
  startDate     DateTime           @default(now())
  endDate       DateTime?
  description   String?
  color         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now())
  closedAt      DateTime?
  isArchived    Boolean            @default(false)
  applications  EventApplication[]

  @@map("events")
}

model EventApplication {
  id            String     @id @default(uuid())
  event         Event      @relation(fields: [eventId], references: [id])
  eventId       String
  player        Player     @relation(fields: [playerId], references: [id])
  playerId      String
  status        Status     @default(NEW)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())

  commanders    ApplicationCommander[]
  equipment     ApplicationEquipment[]

  @@unique([eventId, playerId])
  @@map("event_applications")
  Alliance Alliance[]
  EventRanking EventRanking[]
}

model EventRanking {
  id              String            @id @default(uuid())
  application     EventApplication  @relation(fields: [applicationId], references: [id])
  applicationId   String
  rank            Int
  max_points      Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
}

model ApplicationCommander {
  id              String            @id @default(uuid())
  application     EventApplication  @relation(fields: [applicationId], references: [id])
  applicationId   String
  commander       Commander         @relation(fields: [commanderId], references: [id])
  commanderId     String

  @@unique([applicationId, commanderId])
  @@map("application_commanders")
}

model ApplicationEquipment {
  id              String            @id @default(uuid())
  application     EventApplication  @relation(fields: [applicationId], references: [id])
  applicationId   String
  equipment       Equipment         @relation(fields: [equipmentId], references: [id])
  equipmentId     String
  iconicTier      Int?
  isCrit          Boolean         @default(false)

  @@unique([applicationId, equipmentId])
  @@map("application_equipment")
}
